service: book-app-backend

plugins:
  - serverless-dynamodb-local

custom:
  bookTableName: 'book-table-${self:provider.stage}'
  dynamodb:
    start:
      seed: true
      inMemory: true
    stages:
      - ${self:provider.stage}
    seed:
      books:
        sources:
          - table: ${self:custom.bookTableName}
            sources: [ ./test-data/books.json ]

package:
  patterns:
    - '!./**'
    - 'dist/**'
    - 'node_modules/**'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: int-db
  region: eu-central-1

  environment:
    AWS_BOOK_TABLE: ${self:custom.bookTableName}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - { "Fn::GetAtt": [ "bookTable", "Arn" ] }
            - Fn::Join:
              - '/'
              - - { "Fn::GetAtt": [ "bookTable", "Arn" ] }
                - 'index/*'

functions:
  app: # the default 'catch all' route only
    handler: dist/serverless-app.handler # after 'npm run build' index.ts is transpiled to dist/index.js
    events:
      - httpApi:
          method: '*'
          path: '*'

resources:
  Resources:
    bookTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bookTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
